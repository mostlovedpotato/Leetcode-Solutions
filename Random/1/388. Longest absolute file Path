code is self explainatory

class Solution {
public:
    int lengthLongestPath(string input) {
        input.push_back('\n');
        vector<int> levels(300, 0);
        int level = 0;
        bool isFile = false;
        int ans = 0;
        int length = 0;
            
        for(char c: input){
            switch(c){
                case '\n': { level = 0; length = 0; isFile=false; break; }
                case '\t': { level++; break; }
                case '.' : isFile = true;
                    
                default:
                    length++;
                    levels[level] = length;
                    if(isFile){
                        ans = max(ans, accumulate(levels.begin(), levels.begin() + level + 1, 0) + level);
                    }
            }
        }
        
        return ans;

        
    }
};

or the solution can be by using maps


class Solution {
public:
    int lengthLongestPath(string input) {
        int res = 0, n = input.size(), level = 0;
        unordered_map<int, int> m {{0, 0}};
        for (int i = 0; i < n; ++i) {
            int start = i;
            while (i < n && input[i] != '\n' && input[i] != '\t') {
                ++i;
            }
            if (i >= n || input[i] == '\n') {
                string t = input.substr(start, i - start);
                if (t.find('.') != string::npos) {
                    res = max(res, m[level] + (int)t.size());
                } else {
                    ++level;
                    m[level] = m[level - 1] + (int)t.size() + 1;
                }
                level = 0;
            } else {
                ++level;
            }
        }
        return res;
    }
};
