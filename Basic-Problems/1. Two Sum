class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        const int size = nums.size();
        vector<int> twoSums;
        for (int i = 0 ; i < size - 1; i++ )
            for (int j = i+1; j < size; j++)
                if(nums[i] + nums[j] == target)
                {
                    twoSums.push_back(i);
                    twoSums.push_back(j);
                    return twoSums;
                }
        return twoSums;
    }
};

This is the simplest approach possible.
More complicated is like using unordered map in c++.

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, vector<int>> m;
        for(int i = 0;i<nums.size();i++){
            m[nums[i]].push_back(i);
        }
        for(auto itr = m.begin();itr!=m.end();itr++){
            if(target - itr->first == itr->first){
                if(itr->second.size() > 1){
                    return {itr->second[0], itr->second[1]};
                }
            }
            else if(m.find(target -itr->first) != m.end()){
                return {itr->second[0],m[target - itr->first][0]}; 
            }
        }
        return {};
    }
};
