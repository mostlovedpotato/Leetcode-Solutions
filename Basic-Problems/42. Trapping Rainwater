
In this Problem as already written in code we will find the water above every block and then take the sum.


class Solution {
public:
    int trap(vector<int>& a) {
        // we calculate on each block head how much water we 
        // can put up.
        
        //It will depend on the height of the largest block on left 
        // and to the right of the current block.
        // it will min(right,left)-a[i]
        
        // But to find the maxLeft and maxRight element for each 
        // element we will keep two arrays to keep track of those
        
        // right and left
        int n = a.size();
        vector<int> right(n);
        int max_left_so_far =0;
        int max_right_so_far=0;
        vector<int> left(n);
        for(int i=0;i<n;i++){
            if(a[i] > max_left_so_far){
                max_left_so_far = a[i];
            }
            left[i]=max_left_so_far;
        }
        for(int i=n-1;i>=0;i--){
            if(a[i] > max_right_so_far){
                max_right_so_far=a[i];
            }
            right[i]=max_right_so_far;
        }
        
        int res=0;
        for(int i=0;i<n;i++){
            int water_above = min(left[i],right[i])-a[i];
            if(water_above >=0){
                res+=water_above;
            }
        }
        return res;
        
    }
};
